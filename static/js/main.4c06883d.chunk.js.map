{"version":3,"sources":["Uploader.js","AnglePicker.js","ImageControls.js","ImageLayer.js","AppControls.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Uploader","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDrop","bind","assertThisInitialized","acceptedFiles","_this2","reader","FileReader","onload","img","Image","src","result","onUpload","forEach","file","readAsDataURL","_this3","react_default","a","createElement","style","cursor","es","d","_ref","getRootProps","getInputProps","className","Button","Icon","color","fontSize","Component","AnglePicker","state","angle","pt","dx","radius","nativeEvent","offsetX","dy","offsetY","Math","atan2","PI","onChange","setState","radians","x0","x1","sin","y0","y1","cos","pos","calculatePosition","width","height","transform","concat","r","opacity","onMouseMove","val","updateAngle","stroke","defaultProps","ImageControls","_React$useState","React","useState","_React$useState2","slicedToArray","setAlignment","imageNum","Slider_default","value","sliderValue","min","max","step","e","sliderChange","marginTop","marginBottom","ToggleButtonGroup","toggleValue","exclusive","event","newAlignment","toggleChange","ToggleButton","src_AnglePicker","angleChange","ImageLayer","gradient","direction","fitToScreen","window","innerWidth","innerHeight","handleControlChange","imageRatio","naturalWidth","naturalHeight","screenRatio","scale","floor","canvas","document","getElementById","outputCanvas","dims","getDimensions","ctx","getContext","createLinearGradient","addColorStop","translate","rotate","drawImage","fillStyle","fillRect","onAdd","id","newState","console","log","drawCanvas","src_Uploader","ImageControls_ImageControls","options","AppControls","InputLabel","htmlFor","Select","name","update","target","map","key","charAt","toUpperCase","slice","marginRight","display","type","backgroundColor","Footer","href","rel","App","imageLayers","blendMode","domtoimage","toBlob","then","blob","saveAs","MuiThemeProvider_default","Array","from","keys","i","src_ImageLayer","addLayer","src_AppControls","overflow","top","left","position","mixBlendMode","react_draggable_default","textAlign","margin","padding","verticalAlign","paddingTop","variant","onClick","download","src_Footer_0","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c06883d.chunk.js","sourcesContent":["\"use strict\";\nimport React, { Component } from 'react';\nimport Dropzone from 'react-dropzone';\nimport Icon from '@material-ui/core/Icon';\nimport Button from '@material-ui/core/Button';\n\nclass Uploader extends Component {\n    constructor(props) {\n        super(props)\n        this.onDrop.bind(this);\n    }\n    onDrop(acceptedFiles) {\n        const reader = new FileReader()\n        reader.onload = () => {\n            // Make an image that isn't shown to draw it as a canvas\n            this.img = new Image();\n            this.img.src = reader.result;\n            this.img.onload = () => {\n                this.props.onUpload(this.img)\n            }\n        }\n        acceptedFiles.forEach(file => reader.readAsDataURL(file))\n    }\n    render() {\n        // const classes = useStyles();\n        return (\n            <div style={{ cursor: \"pointer\" }}>\n                <Dropzone onDrop={(d) => this.onDrop(d)}>\n                    {({ getRootProps, getInputProps }) => (\n                        <section>\n                            <div {...getRootProps({ className: 'dropzone' })}>\n                                <input {...getInputProps()} />\n                                <p><Button><Icon color=\"primary\" fontSize=\"large\">add_circle</Icon></Button>Add an image</p>\n                            </div>\n                        </section>\n                    )}\n                </Dropzone>\n            </div>\n        )\n    }\n\n\n}\n\nexport default Uploader;","import React, { Component } from 'react';\nclass AnglePicker extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { angle: 0 }\n    }\n    updateAngle(pt) {\n        let dx = this.props.radius + 5 - pt.nativeEvent.offsetX;\n        let dy = this.props.radius + 5 - pt.nativeEvent.offsetY;\n        let angle = Math.atan2(dy, dx) * (180 / Math.PI) - 90;\n        this.props.onChange(angle);\n        this.setState(\n            { angle: angle }\n        );\n    }\n    calculatePosition() {\n        let radians = this.state.angle * Math.PI / 180;\n        return (\n            {\n                x0: 0,\n                x1: this.props.radius * Math.sin(radians),\n                y0: 0,\n                y1: -this.props.radius * Math.cos(radians),\n            }\n        );\n    }\n    render() {\n        let pos = this.calculatePosition();\n        return (\n            <svg style={{ width: this.props.radius * 3 + 5 + \"px\", height: this.props.radius * 2 + 5 }}>\n                <g transform={`translate(${this.props.radius + 5}, ${this.props.radius + 5})`}>\n                    <circle r={this.props.radius} style={{ opacity: .2 }} onMouseMove={(val) => this.updateAngle(val)} />\n                    <line x0={pos.x0} x1={pos.x1} y0={pos.y0} y1={pos.y1} style={{ stroke: \"black\" }} />\n                </g>\n            </svg>\n        )\n    }\n}\n\nAnglePicker.defaultProps = {\n    radius: 50\n}\nexport default AnglePicker;","\"use strict\";\nimport React, { Component } from 'react';\nimport \"./ImageControls.css\"\nimport Slider from 'material-ui/Slider';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport AnglePicker from \"./AnglePicker.js\";\nexport default function ImageControls(props) {\n\n    const [alignment, setAlignment] = React.useState('left');\n    const handleChange = (event, newAlignment) => {\n        setAlignment(newAlignment);\n        props.toggleChange(newAlignment);\n    };\n    return (\n        <div className=\"container\">\n            <h2>Image {props.imageNum + 1}</h2>\n            <span className=\"controlLabel\">Gradient Location</span>\n            <Slider value={props.sliderValue} min={0} max={1} step={.01}\n                onChange={(e, val) => props.sliderChange(val)}\n                style={{ marginTop: \"-25px\", marginBottom: \"-32px\" }}\n            />\n            <span className=\"controlLabel\">Gradient Direction</span>\n            <ToggleButtonGroup value={props.toggleValue} exclusive onChange={handleChange}>\n                <ToggleButton value=\"left\">Left</ToggleButton>\n                <ToggleButton value=\"right\">Right</ToggleButton>\n            </ToggleButtonGroup>\n            <br />\n            <br />\n            <span className=\"controlLabel\">Rotation Angle</span>\n            <AnglePicker onChange={(val) => props.angleChange(val)} />\n            <hr></hr>\n        </div>\n    )\n}\n// export default ImageControls;","import React, { Component } from 'react';\nimport Uploader from \"./Uploader\";\nimport ImageControls from \"./ImageControls\";\n\nclass ImageLayer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gradient: 0.5,\n            direction: \"left\",\n            angle: 0,\n            fitToScreen: true,\n            width: window.innerWidth - 250,\n            height: window.innerHeight - 20\n        }\n        this.handleControlChange.bind(this);\n    }\n    // Compute size\n    // Compute dimensions to maximize image size to fit screen\n    getDimensions(img) {\n        let width = null,\n            height = null;\n        if (this.state.fitToScreen === true) {\n            // Maximize area of photo\n            let imageRatio = img.naturalWidth / img.naturalHeight;\n            let screenRatio = this.state.width / this.state.height;\n            let scale = Math.min(this.state.width / img.naturalWidth, this.state.height / img.naturalHeight);\n            if (imageRatio > screenRatio) {\n                width = Math.floor(this.state.width);\n                height = Math.floor(img.naturalHeight * scale);\n            } else {\n                height = Math.floor(this.state.height);\n                width = Math.floor(img.naturalWidth * scale);\n            }\n        } else {\n            height = img.naturalHeight;\n            width = img.naturalWidth;\n        }\n        return {\n            width: width,\n            height: height\n        }\n    }\n    // Render the image\n    drawCanvas(img) {\n        let canvas = document.getElementById(this.props.outputCanvas);\n        let dims = this.getDimensions(img);\n        let width = dims.width;\n        let height = dims.height;\n        canvas.width = width;\n        canvas.height = height;\n        this.ctx = canvas.getContext('2d');\n\n        // Linear gradient\n        this.gradient = this.ctx.createLinearGradient(0, height / 2, width, height / 2);\n\n        // Set color stops (depending on direction)\n        if (this.state.direction == \"left\") {\n            this.gradient.addColorStop(this.state.gradient, 'rgba(255, 255, 255, 0)');\n            this.gradient.addColorStop(1, 'rgba(255, 255, 255, 1)');\n        }\n        else {\n            this.gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\n            this.gradient.addColorStop(this.state.gradient, 'rgba(255, 255, 255, 0)');\n        }\n\n\n        // Move registration point to the center of the canvas\n        this.ctx.translate(width / 2, height / 2);\n\n        // Rotate 1 degree\n        this.ctx.rotate(this.state.angle * Math.PI / 180);\n\n        // Move registration point back to the top left corner of canvas\n        this.ctx.translate(-width / 2, -height / 2);\n\n        // Set the fill style and draw a rectangle\n\n        this.ctx.drawImage(img, 0, 0, width, height);\n        this.ctx.fillStyle = this.gradient;\n        this.ctx.fillRect(0, 0, width, height);\n\n        if (typeof (this.state.img) === \"undefined\") {\n            this.props.onAdd();\n            this.setState({ img: img });\n        }\n    }\n    handleControlChange(id, val) {\n        let newState = {};\n        newState[id] = val;\n        this.setState(newState);\n    }\n    render() {\n        console.log(typeof (this.state.img))\n        if (typeof (this.state.img) !== \"undefined\") {\n            this.drawCanvas(this.state.img);\n        }\n        return (\n            <div>\n                {typeof (this.state.img) === \"undefined\" &&\n                    <Uploader onUpload={(val) => this.drawCanvas(val)} />\n                }\n                {typeof (this.state.img) !== \"undefined\" &&\n                    <ImageControls\n                        sliderChange={(val) => this.handleControlChange(\"gradient\", val)}\n                        sliderValue={this.state.gradient}\n                        toggleValue={this.state.direction}\n                        toggleChange={(val) => this.handleControlChange(\"direction\", val)}\n                        angleChange={(val) => this.handleControlChange(\"angle\", val)}\n                        imageNum={this.props.imageNum}\n                    />\n                }\n            </div>\n\n        )\n    }\n}\nexport default ImageLayer;","\"use strict\";\nimport React, { Component } from 'react';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nconst options = [\n    \"normal\",\n    \"multiply\",\n    \"screen\",\n    \"overlay\",\n    \"darken\",\n    \"lighten\",\n    \"color-dodge\",\n    \"color-burn\",\n    \"difference\",\n    \"exclusion\",\n    \"hue\",\n    \"saturation\",\n    \"color\",\n    \"luminosity\"\n];\nclass AppControls extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <InputLabel htmlFor=\"blend-mode\">Blending Technique</InputLabel>\n                <Select name=\"blend-mode\" value={this.props.value} onChange={(e, val) => this.props.update(\"blendMode\", e.target.value)}>\n                    {options.map((d) =>\n                        <option key={d} value={d} style={{ cursor: \"pointer\" }}>{d.charAt(0).toUpperCase() + d.slice(1)}</option>\n                    )}\n                </Select>\n                <br />\n                <br />\n                <div>\n                    <InputLabel htmlFor=\"color\" style={{ marginBottom: \"3px\", marginRight: \"3px\", display: 'inline-block' }}>Background Color: </InputLabel>\n                    <input type=\"color\" name=\"color\" value={this.props.backgroundColor} onChange={(e, val) => this.props.update(\"backgroundColor\", e.target.value)} />\n                </div>\n\n            </div >\n        )\n    }\n}\n\nexport default AppControls;","// Footer\nimport React, { Component } from 'react';\nimport './Footer.css';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                <div className=\"footer-copyright\">\n                    <div className=\"container\">\n                        ©2019 Copyright <a href=\"http://mfviz.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Michael Freeman</a>\n                        <a className=\"right\" target=\"_blank\" href=\"http://twitter.com/mf_viz\" rel=\"noopener noreferrer\">@mf_viz</a>\n                    </div>\n                </div>\n            </footer>\n        )\n    }\n}\nexport default Footer;","\"use strict\";\nimport React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport './App.css';\nimport ImageLayer from \"./ImageLayer\";\nimport domtoimage from 'dom-to-image';\nimport { saveAs } from 'file-saver';\nimport Button from '@material-ui/core/Button';\nimport AppControls from \"./AppControls\";\nimport Draggable from 'react-draggable';\nimport Footer from \"./Footer\";\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            imageLayers: 1,\n            blendMode: \"multiply\",\n            backgroundColor: \"#d3d3d3\"\n        };\n    }\n    download() {\n        domtoimage.toBlob(document.getElementById('canvasContainer'))\n            .then(function (blob) {\n                saveAs(blob, 'blended-images.png');\n            });\n    }\n    addLayer() {\n        this.setState({\n            imageLayers: this.state.imageLayers + 1\n        });\n    }\n    handleControlChange(id, val) {\n        let newState = {};\n        newState[id] = val;\n        this.setState(newState);\n    }\n    render() {\n        return (\n            <MuiThemeProvider>\n                <div>\n                    <div id=\"sideBar\" style={{ width: \"262px\", height: \"95vh\" }}>\n                        <div id=\"title\">\n                            <h1>Image Blender</h1>\n                            <p>Layer and blend images</p>\n                        </div>\n                        <div id=\"content\" >\n                            {Array.from(Array(this.state.imageLayers).keys()).map((d, i) => {\n                                return (<ImageLayer imageNum={d} key={d} onAdd={() => this.addLayer()} outputCanvas={\"canvas\" + i} />)\n                            })\n                            }\n                            <hr></hr>\n                            <br />\n\n                        </div>\n                        <AppControls backgroundColor={this.state.backgroundColor} value={this.state.blendMode} update={(id, val) => this.handleControlChange(id, val)} />\n                    </div>\n                    <div id=\"canvasContainer\"\n                        style={{\n                            overflow: \"hidden\",\n                            top: '10px',\n                            left: '276px',\n                            position: \"absolute\",\n                            width: window.innerWidth - 285,\n                            height: window.innerHeight - 30,\n                            mixBlendMode: this.state.blendMode,\n                            backgroundColor: this.state.backgroundColor\n                        }}\n                    >\n                        {Array.from(Array(this.state.imageLayers).keys()).map((d, i) => {\n                            return (\n                                <Draggable key={d} style={{ cursor: \"pointer\" }}>\n                                    <canvas id={\"canvas\" + i} style={{ position: 'absolute', top: '0px', left: '0px', mixBlendMode: this.state.blendMode }} />\n                                </Draggable>\n                            )\n                        })\n                        }\n                        {this.state.imageLayers === 1 &&\n                            <div style={{\n                                width: window.innerWidth * 0.8 - 350,\n                                height: window.innerHeight - 50,\n                                textAlign: \"center\",\n                                margin: \"auto\",\n                                padding: \"50px\",\n                                verticalAlign: \"middle\"\n                            }}>\n                                <div style={{ opacity: .6, backgroundColor: this.state.backgroundColor, height: \"100vh\", paddingTop: \"50vh\" }}>\n                                    <div>Use the control panel to upload and manipulate layers of draggable images.</div>\n                                </div>\n                            </div>\n\n                        }\n                    </div>\n                    <Button id=\"download\" color=\"primary\" variant=\"contained\" onClick={() => this.download()}>Download</Button>\n                </div>\n                <Footer />\n            </MuiThemeProvider >\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}